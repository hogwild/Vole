[{"/Users/xg7/Desktop/vole/src/index.js":"1","/Users/xg7/Desktop/vole/src/run.js":"2"},{"size":5772,"mtime":1610364311020,"results":"3","hashOfConfig":"4"},{"size":1545,"mtime":1610310224240,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"auqgcg",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"/Users/xg7/Desktop/vole/src/index.js",[],"/Users/xg7/Desktop/vole/src/run.js",["12"],"/*functions for processing the instructions\n1. loading the program into main memory (put the instructions into the main memory where stores instructions)\n2. loading an instruction from the main memory (Program counter)\n3. decoding input instruction which is a string (Instruction register)\n4. handling different instructions\n    (1) finding the register by its id\n    (2) finding the memory cell by its address\n    (3) changing the color of the specified register/memory cell\n    (4) changing the value of the specified reigister/memory cell\n5. vole instructions:\nop-code operand description\n    1     RXY   Load register R with the bit pattern found in XY  \n*/\n\nexport function run (prgm) {\n    // let p = parseProgram(prgm);\n    // let instr;\n    // for (instr of p) {\n    //     decodeInstruction(instr);\n    // };\n    return parseProgram(prgm);\n}\n\nfunction decodeInstruction(str) {\n    switch (str[0]) {\n        case '1':\n            console.log(\"Load register R from XY\");\n            break;\n        case '2':\n            console.log(\"To be done\");\n            break;\n        default: \n            console.log('No such an instruction.')\n            break;\n    };\n    \n}\n\nfunction parseProgram(str) {\n    let p = str.split('\\n')\n        .filter(w => {\n            if(w.length === 0 || w[0] === '#'){\n                return false\n            }\n            return true\n        }).map(w => {\n            return w.substr(0, 4)\n        });\n    // let q = p.map(w => {\n    //    return w.substr(0, 4)\n    // });\n    console.log(p);\n    return p;\n}",["13","14"],{"ruleId":"15","severity":1,"message":"16","line":24,"column":10,"nodeType":"17","messageId":"18","endLine":24,"endColumn":27},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},"no-unused-vars","'decodeInstruction' is defined but never used.","Identifier","unusedVar","no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-global-assign","no-unsafe-negation"]